.\" Copyright (C) 2022 Jens Axboe <axboe@kernel.dk>
.\"
.\" SPDX-License-Identifier: LGPL-2.0-or-later
.\"
.TH io_uring_prep_recv 3 "March 12, 2022" "liburing-2.2" "liburing Manual"
.SH NAME
io_uring_prep_recv \- prepare a recv request
.SH SYNOPSIS
.nf
.B #include <liburing.h>
.PP
.BI "void io_uring_prep_recv(struct io_uring_sqe *" sqe ","
.BI "                        int " sockfd ","
.BI "                        void *" buf ","
.BI "                        size_t " len ","
.BI "                        int " flags ");"
.fi
.SH DESCRIPTION
.PP
The
.BR io_uring_prep_recv (3)
function prepares a recv request. The submission
queue entry
.I sqe
is setup to use the file descriptor
.I sockfd
to start receiving the data into the buffer destination
.I buf
of size
.I size
and with modifier flags
.IR flags .

This function prepares an async
.BR recv (2)
request. See that man page for details on the arguments specified to this
prep helper.

After calling this function, additional io_uring internal modifier flags
may be set in the SQE
.I off
field. The following flags are supported:
.TP
.B IORING_RECVSEND_POLL_FIRST
If set, io_uring will assume the socket is currently empty and attempting to
receive data will be unsuccessful. For this case, io_uring will arm internal
poll and trigger a receive of the data when the socket has data to be read.
This initial receive attempt can be wasteful for the case where the socket
is expected to be empty, setting this flag will bypass the initial receive
attempt and go straight to arming poll. If poll does indicate that data is
ready to be received, the operation will proceed.

Can be used with the CQE
.B IORING_CQE_F_SOCK_NONEMPTY
flag, which io_uring will set on CQEs after a
.BR recv (2)
or
.BR recvmsg (2)
operation. If set, the socket still had data to be read after the operation
completed. Both these flags are available since 5.19.
.P

.SH RETURN VALUE
None
.SH ERRORS
The CQE
.I res
field will contain the result of the operation. See the related man page for
details on possible values. Note that where synchronous system calls will return
.B -1
on failure and set
.I errno
to the actual error value, io_uring never uses
.IR errno .
Instead it returns the negated
.I errno
directly in the CQE
.I res
field.
.SH SEE ALSO
.BR io_uring_get_sqe (3),
.BR io_uring_submit (3),
.BR recv (2)
